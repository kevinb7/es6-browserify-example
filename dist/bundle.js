(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Point = to5Runtime.interopRequire(require("./point"));

var Circle = to5Runtime.interopRequire(require("./circle"));

var random = function (max) {
  return max * Math.random();
};

var width = window.innerWidth;
var height = window.innerHeight;

Circle.max_x = width;
Circle.max_y = height;

var canvas = document.getElementById("canvas");
Object.assign(canvas, { width: width, height: height });
var ctx = canvas.getContext("2d");

var max_radius = 50;
var count = 100;
var circles = [];

for (var i = 0; i < count; i++) {
  var _map = [width, height, max_radius].map(random);

  var _map2 = to5Runtime.slicedToArray(_map, 3);

  var x = _map2[0];
  var y = _map2[1];
  var radius = _map2[2];
  circles.push(new Circle(new Point(x, y), radius));
}

ctx.fillStyle = "rgba(0,0,255,0.3)";
ctx.strokeStyle = "rgba(0,0,0,0.6)";
ctx.lineWidth = 1;

var drawLine = function (p1, p2) {
  ctx.beginPath();
  ctx.moveTo(p1.x, p1.y);
  ctx.lineTo(p2.x, p2.y);
  ctx.stroke();
};

var drawScene = function () {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  for (var _i = 0; _i < circles.length; _i++) {
    for (var j = 0; j < _i; j++) {
      var _ref = [circles[_i], circles[j]];

      var c1 = _ref[0];
      var c2 = _ref[1];
      var min_dist = circles[_i].radius + circles[j].radius;


      if (c1.center.distanceTo(c2.center) < min_dist) {
        drawLine(c1.center, c2.center);
      }
    }
  }

  for (var _iterator = circles[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
    var c = _step.value;
    c.draw(ctx);
    c.update();
  }

  requestAnimationFrame(drawScene, canvas);
};

requestAnimationFrame(drawScene, canvas);

},{"./circle":2,"./point":3}],2:[function(require,module,exports){
"use strict";

var Point = to5Runtime.interopRequire(require("./point"));

var Circle = (function () {
  function Circle(center, radius) {
    this.center = center;
    this.radius = radius;
    this.velocity = new Point(2 * Math.random(), 2 * Math.random());
  }

  Circle.prototype.draw = function draw(ctx) {
    var x = this.center.x;
    var y = this.center.y;
    var tau = 2 * Math.PI;

    ctx.beginPath();
    ctx.arc(x, y, this.radius, 0, tau, false);
    ctx.fill();
  };

  Circle.prototype.update = function update() {
    this.center.addTo(this.velocity);
    if (this.center.x > Circle.max_x) {
      this.center.x = Circle.max_x;
      this.velocity.x *= -1;
    }
    if (this.center.y > Circle.max_y) {
      this.center.y = Circle.max_y;
      this.velocity.y *= -1;
    }
    if (this.center.x < Circle.min_x) {
      this.center.x = Circle.min_x;
      this.velocity.x *= -1;
    }
    if (this.center.y < Circle.min_y) {
      this.center.y = Circle.min_y;
      this.velocity.y *= -1;
    }
  };

  return Circle;
})();

Circle.min_x = 0;
Circle.min_y = 0;
Circle.max_x = 512;
Circle.max_y = 512;

module.exports = Circle;

},{"./point":3}],3:[function(require,module,exports){
"use strict";

var Point = (function () {
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }

  Point.prototype.distanceTo = function distanceTo(otherPoint) {
    return this.subtract(otherPoint).length();
  };

  Point.prototype.subtract = function subtract(otherPoint) {
    return new Point(this.x - otherPoint.x, this.y - otherPoint.y);
  };

  Point.prototype.length = function length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };

  Point.prototype.addTo = function addTo(otherPoint) {
    this.x += otherPoint.x;
    this.y += otherPoint.y;
  };

  return Point;
})();

module.exports = Point;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
